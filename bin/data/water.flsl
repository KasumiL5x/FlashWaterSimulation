use namespace flare;
//use namespace flare.transforms;
//use namespace flare.filters;
use namespace flare.blendMode;

samplerCube CubeTex;
sampler2D ReflectionTex;
sampler2D NormalTex1;

param TIME time;

// -*- Color properties -*-
param float3 BaseColor = float3(1.0, 0.0, 0.0);
param float Ambient = 0.2;

// -*- Normal texture properties -*-
param float NormalScale = 4.0;
param float NormalSpeed = 0.05;
param float NormalAlpha = 0.1;

// -*- Foam properties -*-
param float FoamMinHeight = 3.0;
param float FoamMaxHeight = 5.1;
param float3 FoamColor = float3(0.2);

// -*- Sunlight properties -*-
param float SunStrength = 1.2;
param float SunShine = 75.0;
param float3 SunColor = float3(1.2, 0.4, 0.1);
param float SunPow = 0.45454545454545454545454545454545;
param float SunEnvMod = 0.40;

// -*- wave color properties -*-
param float WaveColorMod = 0.20;
param float WaveColorPow = 4.0;

// -*- Specular properties -*-
param float SpecularPow = 1.0;
param float SpecularMod = 0.26;

// -*- Scene reflection properties -*-
param float SceneReflectMod = 0.25;

interpolated float3 interp_pos;
interpolated float4 projected_pos;
interpolated float3 interp_nrm;

param float3 L = normalize(float3(0.4, 0.5, 0.4));

float4 vertexShader()
{
	float4 pos = position.xyzw;
	// Offset position by simulation height.
	pos.y += color0.x;
	
	// Store position for use in fragment shader.
	interp_pos = pos.xyz;
	
	pos *= worldViewProj;
	
	// Store projected position for scene reflections.
	projected_pos = pos;
	
	// Calculate the normal based on the XZ.
	float2 N_XZ = float2(color0.b, color0.a);
	interp_nrm = normalize(float3(color0.b, sqrt(1.0 - dot(N_XZ, N_XZ)), color0.a));
	
	return pos;
}

float4 fragmentShader()
{
	// Normal from VS.
	float3 N = interp_nrm;
	// Sample normal texture for a look of idle movement.
	N += (sampler2D(NormalTex1, iUV0 * NormalScale + time.xz * NormalSpeed).xzy - 0.5) * NormalAlpha;
	N += (sampler2D(NormalTex1, iUV0 * NormalScale - time.zx * NormalSpeed).xzy - 0.5) * NormalAlpha;
	N = normalize(N);
	
	// Specular highlights (from some paper I found online).
	float3 vref = normalize(reflect(L, N)).xyz;
	float spec_tmp = max(0.0, dot(L, vref));
	spec_tmp = pow(spec_tmp, SpecularPow);
	float3 specularColor = float3(spec_tmp) * SpecularMod;
	
	// Simple lighting.
	float dp = max(dot(L, N), 0.0);
	
	// Final output color starting with ambient, base color, and specularity.
	float3 diffuse = ((Ambient * BaseColor) + BaseColor) * dp;
	float4 color = float4(diffuse, 0.0);
	color.xyz += specularColor;
	
	// View vector.
	float3 V = normalize(interp_pos - camPos);
	// Reflection vector.
	float3 RV = normalize(reflect(V, N));
	// Cubemap reflection.
	float4 cube_reflect = samplerCube(CubeTex, RV);
	// Sunlight equation.
	float3 sunlight = pow(SunStrength * pow(max(0.0, dot(RV, L)), SunShine) * SunColor, SunPow);
	// Mix with cubemap reflection and sunlight.
	color += float4((cube_reflect.xyz + sunlight) * SunEnvMod, 0.0);
	
	// Screen-space UV for reflections.
	float2 proj_uv = projected_pos.xy / projected_pos.w * float2(0.5, -0.5) + 0.5;
	// Reflection of the scene (fudge the value a little to get some nice wavy sampling).
	float4 reflection_color = sampler2D(ReflectionTex, proj_uv + N.xz * 0.2);
	// Note: Can modulate reflection_color and its alpha by a value here to dim out the scene reflection amount.
	// Mix in the scene reflection using reflection alpha (zero where there's no geometry).
	color += float4(reflection_color.xyz * SceneReflectMod, reflection_color.a * SceneReflectMod);

	// Color of wave based on height.
	float3 wave_color = min(BaseColor * WaveColorMod, pow(iColor0.rrr, WaveColorPow));
	// Mix in the wave color.
	color += float4(wave_color, 0.0);
	
	// Foam based on height.
	float3 foam = FoamColor * max(0.0, (iColor0.r - FoamMinHeight) / (FoamMaxHeight - FoamMinHeight));
	// Mix in the foam color.
	color += float4(foam, 0.0);
	
	color.x = min(1.0, color.x);
	color.y = min(1.0, color.y);
	color.z = min(1.0, color.z);
	color.w = min(1.0, color.w);
	color.w = 0.75;
	
	return color;
}

technique main
{
	output vertex = vertexShader();
	output fragment = fragmentShader();
	output sourceFactor = "one";
	output destFactor = "oneMinusSourceAlpha";
}
